package aula7_estrutura_de_dados;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class camada_pilha {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		Queue<String> fila = new LinkedList<>();

		printMenu();

		System.out.print("\nEntre com a opção desejada: ");
		int choiceList = sc.nextInt();

		while (verifyOption(choiceList)) {
			switch (choiceList) {
			case 1:
				addClient(fila);
				System.out.print("\nDeseja continuar o programa (s/n)? ");
				choiceList = verifyInput(sc.next().toLowerCase().charAt(0));
				break;
			case 2:
				listClients(fila);
				System.out.print("\nDeseja continuar o programa (s/n)? ");
				choiceList = verifyInput(sc.next().toLowerCase().charAt(0));
				break;
			case 3:
				removeClients(fila);
				System.out.print("\nDeseja continuar o programa (s/n)? ");
				choiceList = verifyInput(sc.next().toLowerCase().charAt(0));
				break;
			case 0:
				System.out.println("\nPrograma Finalizado!");
				break;
			default:
				System.out.println("Test");
			}

		}

		sc.close();
	}

	// Imprime o menu
	public static void printMenu() {
		for (int i = 0; i <= 50; i++)
			System.out.print("*");
		System.out.println("\n");
		System.out.println("\t 1 - Adicionar Cliente na Fila");
		System.out.println("\t 2 - Listar todos os Clientes");
		System.out.println("\t 3 - Retirar Cliente da Fila");
		System.out.println("\t 0 - Sair");
		System.out.println("");
		for (int i = 0; i <= 50; i++)
			System.out.print("*");
	}

	// Verifica a opção escolhida
	public static boolean verifyOption(int inputOption) {
		int option = inputOption;
		Scanner sc = new Scanner(System.in);
		while (!(option <= 3) || !(option > -1)) {
			System.out.print("\nOpção inválida! \nDigite novamente: ");
			option = sc.nextInt();
		}
		return (option != 0) ? true : false;
	}

	// Verifica se o user deseja continuar
	public static int verifyInput(char response) {
		char input = response;
		Scanner sc = new Scanner(System.in);
		if (input == 'n') {
			System.out.println("\nPrograma Finalizado!");
			return 0;
		} else {
			System.out.print("\nEntre com a opção desejada: ");
			int choiceList = sc.nextInt();
			verifyOption(choiceList);
			return choiceList;
		}
	}

	// Adicionar cliente na fila
	public static void addClient(Queue<String> fila) {
		Scanner sc = new Scanner(System.in);
		System.out.print("\nDigite o nome: ");
		String nameInput = sc.nextLine();
		fila.add(nameInput);
		System.out.println("\nFila:");
		System.out.println("\n" + nameInput);
		System.out.println("\nCliente adicionado!");
	}
	
	// Lista nomes:
	public static void listClients(Queue<String> fila) {
		System.out.println("\nLista de Clientes na Fila:");
		System.out.println();
		fila.forEach(name -> System.out.println(name));
	}
	
	// Remove cliente
	public static void removeClients(Queue<String> fila) {
		if (fila.poll() != null) {
			System.out.println("\nFila:\n");
			System.out.println("\nO Cliente " + fila.p() + " foi Chamado!");
			fila.forEach(n -> System.out.println(n));
			System.out.println("\nO Cliente " + fila.poll() + " foi Chamado!");
		}else {
			System.out.println("\nA Fila está vazia!");
		}
	}

}
